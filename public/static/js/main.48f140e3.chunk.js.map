{"version":3,"sources":["logo.png","schema.js","components/utils/Event.js","components/EarthquakesList.js","config.js","components/SearchEarthquakes.js","components/MapComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GET_EARTHQUAKES","gql","_templateObject","event","Event","Object","classCallCheck","this","events","eventName","fn","push","i","length","splice","data","forEach","EarthquakesList","_ref","_ref$props","props","_ref$props$location","location","latitude","longitude","fromDate","toDate","minMagnitude","maxMagnitude","radius","onError","_ref2","graphQLErrors","networkError","map","_ref3","message","locations","path","console","log","concat","_useQuery","useQuery","variables","parseFloat","loading","error","earthquakes","react_default","a","createElement","emit","quake","key","id","className","properties","place","mag","googleApiKey","SearchEarthquakes","_this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","defineProperty","target","name","value","onDateSelect","field","date","onSubmit","preventDefault","state","isSubmitted","Date","setMonth","getMonth","bind","assertThisInitialized","_this2","src","logo","alt","react_google_autocomplete_default","placeholder","types","onPlaceSelected","geometry","lat","lng","formatted_address","type","es","selected","dateFormat","components_EarthquakesList","Component","GoogleApiWrapper","apiKey","libraries","mapStyles","width","height","google","_useState","useState","initialCenter","slicedToArray","_useState3","_useState4","showInfoWindow","setShowInfoWindow","_useState5","_useState6","activeMarker","setActiveMarker","_useState7","_useState8","setLocation","_useState9","_useState10","setEarthquakes","on","dist","zoom","style","center","position","title","onClick","marker","coordinates","label","text","color","fontWeight","icon","url","visible","onClose","client","ApolloClient","uri","App","react_common_esm","components_SearchEarthquakes","components_MapComponent","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48f140e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.831d1b10.png\";","import gql from 'graphql-tag';\n\nexport const typeDefs = `\n\n  type Geometry {\n    type: String\n    coordinates: [Float]\n  }\n\ntype Properties {\n  mag: Float\n  place: String\n  time: Float,\n  tz: Float\n  tsunami: Float\n  magType: String\n  type: String\n}\n\ntype Earthquake {\n  geometry: Geometry\n  properties: Properties\n  id: ID\n}\n\ninput QueryInput {\n  latitude: Float\n  longitude: Float\n  minMagnitude: Float\n  maxMagnitude: Float\n  radius: Float\n  fromDate: String\n  toDate: String\n}\n\n  type Query {\n    getEarthquakes(input: QueryInput): [Earthquake]\n  }\n`;\n\nexport const GET_EARTHQUAKES = gql`\n  query getEarthquakes(\n    $fromDate: String\n    $toDate: String\n    $minMagnitude: Float\n    $maxMagnitude: Float\n    $latitude: Float\n    $longitude: Float\n    $radius: Float\n  ) {\n    earthquakes(\n      fromDate: $fromDate\n      toDate: $toDate\n      minMagnitude: $minMagnitude\n      maxMagnitude: $maxMagnitude\n      latitude: $latitude\n      longitude: $longitude\n      radius: $radius\n    ) {\n      properties {\n        mag\n        place\n      }\n      geometry {\n        coordinates\n      }\n      id\n    }\n  }\n`;\n","class Event {\n  constructor() {\n    this.events = {};\n  }\n\n  on(eventName, fn) {\n    // Create event queue if doesn't exist\n    this.events[eventName] = this.events[eventName] || [];\n    // Add listener to the event queue\n    this.events[eventName].push(fn);\n  }\n\n  off(eventName, fn) {\n    // Find and remove listener from the event queue\n    if (this.events[eventName]) {\n      for (let i = 0; i < this.events[eventName].length; i++) {\n        if (this.events[eventName][i] === fn) {\n          this.events[eventName].splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  emit(eventName, data) {\n    // Call each listener in the event queue\n    if (this.events[eventName]) {\n      this.events[eventName].forEach(fn => fn(data));\n    }\n  }\n}\n\nconst event = new Event();\nexport default event;\n","import React from 'react';\nimport { GET_EARTHQUAKES } from '../schema';\nimport { useQuery } from '@apollo/react-hooks';\nimport { onError } from 'apollo-link-error';\nimport event from './utils/Event';\n\nconst EarthquakesList = ({\n  props: {\n    location: { latitude, longitude },\n    fromDate,\n    toDate,\n    minMagnitude,\n    maxMagnitude,\n    radius\n  }\n}) => {\n  onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors)\n      graphQLErrors.map(({ message, locations, path }) =>\n        console.log(\n          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n        )\n      );\n\n    if (networkError) console.log(`[Network error]: ${networkError}`);\n  });\n\n  const {\n    loading,\n    error,\n    data: { earthquakes }\n  } = useQuery(GET_EARTHQUAKES, {\n    variables: {\n      latitude: parseFloat(latitude),\n      longitude: parseFloat(longitude),\n      fromDate,\n      toDate,\n      minMagnitude: parseFloat(minMagnitude),\n      maxMagnitude: parseFloat(maxMagnitude),\n      radius: parseFloat(radius)\n    }\n  });\n  if (loading) return 'Loading...';\n  if (error) return <p>{error.message}</p>;\n  if (earthquakes && earthquakes.length > 0) {\n    event.emit('earthquakes', earthquakes);\n    return earthquakes.map(quake => (\n      <li key={quake.id}>\n        <div className='card'>\n          <div className='card-body'>\n            <h5 className='card-title'>{quake.properties.place}</h5>\n            <p className='card-text'>Magnitude {quake.properties.mag}</p>\n          </div>\n        </div>\n      </li>\n    ));\n  } else {\n    return <p>No records founds</p>;\n  }\n};\n\nexport default EarthquakesList;\n","export const googleApiKey = 'AIzaSyDV76krUR_b9kdySGwWJ5Zdp1Vqlm1uZaA';\nexport const serverUri = '/graphql';\n","import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport logo from '../logo.png';\nimport EarthquakesList from './EarthquakesList';\nimport { GoogleApiWrapper } from 'google-maps-react';\nimport { googleApiKey } from '../config';\nimport Autocomplete from 'react-google-autocomplete';\nimport event from './utils/Event';\n\nclass SearchEarthquakes extends Component {\n  constructor(props) {\n    super(props);\n    let date = new Date();\n    date.setMonth(date.getMonth() - 2);\n    this.state = {\n      location: { name: '', latitude: '', longitude: '' },\n      minMagnitude: 6,\n      maxMagnitude: 8,\n      radius: 300,\n      fromDate: date,\n      toDate: new Date(),\n      isSubmitted: false\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  onDateSelect = (field, date) => {\n    this.setState({ [field]: date });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    console.log(this.state.location);\n    this.setState({ isSubmitted: true });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>\n          <img src={logo} alt='Quaky Earth' className='logo' /> Quaky Earth\n        </h1>\n        <hr />\n        <form onSubmit={this.onSubmit}>\n          <div className='form-group'>\n            <Autocomplete\n              className='form-control'\n              placeholder='Search Places'\n              types={['(regions)']}\n              onPlaceSelected={place => {\n                this.setState({\n                  location: {\n                    latitude: place.geometry.location.lat(),\n                    longitude: place.geometry.location.lng(),\n                    name: place.formatted_address\n                  }\n                });\n                event.emit('placeSelected', this.state.location);\n              }}\n            />\n          </div>\n          <label>Magnitude Range</label>\n          <div className='row'>\n            <div className='form-group col-md-5'>\n              <input\n                type='text'\n                className='form-control minMag-input'\n                placeholder='Minumun magnitude'\n                name='minMagnitude'\n                value={this.state.minMagnitude}\n                onChange={this.onChange}\n              />\n            </div>\n            <span className='col-md-2'> to</span>\n            <div className='form-group col-md-5'>\n              <input\n                type='text'\n                className='form-control'\n                placeholder='Maximum magnitude maxMag-input'\n                name='maxMagnitude'\n                value={this.state.maxMagnitude}\n                onChange={this.onChange}\n              />\n            </div>\n          </div>\n          <label>Radius ( km )</label>\n          <div className='row'>\n            <div className='form-group col-md-6'>\n              <input\n                type='text'\n                className='form-control'\n                placeholder='Radius'\n                name='radius'\n                value={this.state.radius}\n                onChange={this.onChange}\n              />\n            </div>\n          </div>\n          <div className='row'>\n            <div className='form-group col-md-6'>\n              <label>From </label>\n              <DatePicker\n                className='form-control'\n                selected={this.state.fromDate}\n                value={this.state.fromDate}\n                onChange={value => this.onDateSelect('fromDate', value)}\n                dateFormat='dd MMM yyyy'\n              />\n            </div>\n\n            <div className='form-group col-md-6'>\n              <label>To </label>\n              <DatePicker\n                className='form-control'\n                selected={this.state.toDate}\n                value={this.state.toDate}\n                onChange={value => this.onDateSelect('toDate', value)}\n                dateFormat='dd MMM yyyy'\n              />\n            </div>\n          </div>\n\n          <div>\n            <button type='submit' className='btn'>\n              Search\n            </button>\n          </div>\n        </form>\n        <hr />\n        <ul>\n          {this.state.isSubmitted && <EarthquakesList props={this.state} />}\n        </ul>\n        {/* <div className='card' key='1'>\n            <div className='card-body'>\n              <h5 className='card-title'>61km ENE of Namie, Japan</h5>\n              <p className='card-text'>Magnitude 6.3</p>\n            </div>\n          </div>\n          <div className='bottom-line'></div>\n          <div className='card' key='1'>\n            <div className='card-body'>\n              <h6 className='card-title'>30km ESE of Ohara, Japan</h6>\n              <p className='card-text'>Magnitude 5</p>\n            </div>\n          </div>\n          <div className='bottom-line'></div> */}\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: `${googleApiKey}`,\n  libraries: ['places']\n})(SearchEarthquakes);\n","import React, { useState } from 'react';\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport { googleApiKey } from '../config';\nimport event from './utils/Event';\n\nconst mapStyles = {\n  width: '75vw',\n  height: '100vh'\n};\n\nconst MapComponent = ({ google }) => {\n  const [initialCenter] = useState({\n    lat: -37.8136,\n    lng: 144.9631,\n    name: 'Melbourne'\n  });\n  const [showInfoWindow, setShowInfoWindow] = useState(false);\n  const [activeMarker, setActiveMarker] = useState({});\n  const [location, setLocation] = useState({});\n  const [earthquakes, setEarthquakes] = useState([]);\n\n  const onClose = () => {\n    if (showInfoWindow) {\n      setShowInfoWindow(false);\n      setActiveMarker({});\n    }\n  };\n\n  event.on('earthquakes', earthquakes => {\n    setEarthquakes(earthquakes);\n  });\n\n  event.on('placeSelected', location => {\n    setLocation(location);\n  });\n\n  return (\n    <Map\n      google={google}\n      zoom={6}\n      style={mapStyles}\n      initialCenter={{\n        lat: initialCenter.lat,\n        lng: initialCenter.lng\n      }}\n      center={{\n        lat: location.latitude,\n        lng: location.longitude\n      }}>\n      <Marker\n        position={{\n          lat: location.latitude || initialCenter.lat,\n          lng: location.longitude || initialCenter.lng\n        }}\n        title={location.name}\n        name={location.name || initialCenter.name}\n        onClick={(props, marker) => {\n          setActiveMarker(marker);\n          setShowInfoWindow(true);\n        }}\n      />\n      {earthquakes.length > 0 &&\n        earthquakes.map((quake, i) => (\n          <Marker\n            key={i}\n            position={{\n              lat: quake.geometry.coordinates[1],\n              lng: quake.geometry.coordinates[0]\n            }}\n            title={quake.properties.place}\n            name={quake.properties.place}\n            label={{\n              text: `${quake.properties.mag}`,\n              color: 'yellow',\n              fontWeight: 'bold'\n            }}\n            icon={{\n              url: 'https://maps.google.com/mapfiles/ms/micons/earthquake.png'\n            }}\n            onClick={(props, marker) => {\n              setActiveMarker(marker);\n              setShowInfoWindow(true);\n            }}\n          />\n        ))}\n      <InfoWindow\n        marker={activeMarker}\n        visible={showInfoWindow}\n        onClose={() => onClose()}>\n        <div>\n          <strong>{activeMarker.name}</strong>\n        </div>\n      </InfoWindow>\n    </Map>\n  );\n};\n\nexport default GoogleApiWrapper({\n  apiKey: `${googleApiKey}`\n})(MapComponent);\n","import React, { Component } from 'react';\nimport './App.css';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport SearchEarthquakes from './components/SearchEarthquakes';\nimport MapComponent from './components/MapComponent';\nimport { serverUri } from './config';\n\nconst client = new ApolloClient({\n  uri: serverUri\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className='App'>\n          <div className='container-fluid h-100'>\n            <div className='row h-100'>\n              <div className='col-md-3'>\n                <SearchEarthquakes />\n              </div>\n              <div className='col-md-9'>\n                <MapComponent />\n              </div>\n            </div>\n          </div>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}